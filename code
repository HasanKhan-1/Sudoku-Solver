#BOARD TO SOLVE
board=         [[5, 3, 0, 0, 7, 0, 0, 0, 0],
                [6, 0, 0, 1, 9, 5, 0, 0, 0],
                [0, 9, 8, 0, 0, 0, 0, 6, 0],
                [8, 0, 0, 0, 6, 0, 0, 0, 3],
                [4, 0, 0, 8, 0, 3, 0, 0, 1],
                [7, 0, 0, 0, 2, 0, 0, 0, 6],
                [0, 6, 0, 0, 0, 0, 2, 8, 0],
                [0, 0, 0, 4, 1, 9, 0, 0, 5],
                [0, 0, 0, 0, 8, 0, 0, 7, 9]]

#PART 1: PRINT BOARD
def print_board(board):
  if board==[]:
    return

  for row in board:
    to_print=''
    for val in row:
      to_print+= str(val)+ ' '
    print(to_print)


#Problem 1B: Print pretty(review!!)

def print_board1(board):
# number of rows and columns inside one box
  num_row= len(board)
  num_col= len(board[0])
  num_row_box = num_row / 3
  num_col_box = num_col / 3


# printing
  for row in range(num_row):
      if row % num_row_box == 0:
          print(" ══════   ══════  ══════ ")

      for col in range(num_col):
          if col % num_col_box == 0:
#commas in python create an extra space in between passed arguments
              print("║", end=" ")
          print(board[row][col], end=" ")
      print("║")
  print(" ══════   ══════  ══════ ")



#PART 2: FIND FIRST EMPTY CELL:

def find_zero(board):
  
  num_row= len(board)
  num_col=len(board[0])

  for row_pos in range(0,num_row):
    for col_pos in range(0,num_col):
      if board[row_pos][col_pos]==0:
      #The return is treated as a list can be called as var[0], or var[1]
        return [row_pos, col_pos]  
        
  return

#PROBLEM 3: IS VALID PLACEMENT

def is_valid(board,row,col,value):

  if board[row][col]!=0 or row>9:
    return False
    
  num_row= len(board)
  #num_col=len(board[0])
  
  #Row checker:
  if value in board[row]: #(REMEMBER THIS UTILITY)
    return False
  

  #col checker
  for colom in range(0,num_row):
    if board[colom][col]==value:
      return False

  #3x3 check
  row1= (row-(row%3))
  col1= (col-(col%3))
  
  for row_counter in range(row1,row1+3):
    for col_counter in range(col1,col1+3):
      if board[row_counter][col_counter]==value:
        return False
  return True


#STEP 4: SOLVE THE SUDOKU(BACKTRACKING)

def solve(board):
    zero_position = [0, 0]

    #zeros checker
    if find_zero(board) == None:
        print_board1(board)
        return True
      #(review)
    # new zero value detected
    else:
        # zero value position
        zero_position = find_zero(board)

    # brute force mechanism
    for value in range(1, 10):
        if is_valid(board, zero_position[0], zero_position[1], value):
            board[zero_position[0]][zero_position[1]] = value

            if solve(board):
                return True
            board[zero_position[0]][zero_position[1]] = 0

    return False


print("Sudoku board:")
print_board1(board)
solve(board)
print("Solved Sudoku Board:")
print_board1(board)